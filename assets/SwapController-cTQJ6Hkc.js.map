{"version":3,"file":"SwapController-cTQJ6Hkc.js","sources":["../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js","../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js"],"sourcesContent":["// -- Types --------------------------------------------- //\nimport { NumberUtil } from '@reown/appkit-common';\n// -- Util ---------------------------------------- //\nexport const SwapCalculationUtil = {\n    getGasPriceInEther(gas, gasPrice) {\n        const totalGasCostInWei = gasPrice * gas;\n        const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;\n        return totalGasCostInEther;\n    },\n    getGasPriceInUSD(networkPrice, gas, gasPrice) {\n        const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);\n        const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);\n        const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);\n        return gasCostInUSD.toNumber();\n    },\n    getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {\n        const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);\n        const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);\n        const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);\n        return priceImpact.toNumber();\n    },\n    getMaxSlippage(slippage, toTokenAmount) {\n        const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);\n        const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);\n        return maxSlippageAmount.toNumber();\n    },\n    getProviderFee(sourceTokenAmount, feePercentage = 0.0085) {\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);\n        return providerFee.toString();\n    },\n    isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {\n        const gasPrice = gasPriceInUSD || '0';\n        if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {\n            return true;\n        }\n        return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);\n    },\n    isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {\n        const sourceTokenBalance = balance?.find(token => token.address === sourceTokenAddress)\n            ?.quantity?.numeric;\n        const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || '0').lt(sourceTokenAmount);\n        return isInSufficientBalance;\n    }\n};\n//# sourceMappingURL=SwapCalculationUtil.js.map","import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { NumberUtil } from '@reown/appkit-common';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { W3mFrameRpcConstants } from '@reown/appkit-wallet/utils';\nimport { BalanceUtil } from '../utils/BalanceUtil.js';\nimport { getActiveNetworkTokenAddress, getPreferredAccountType } from '../utils/ChainControllerUtil.js';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { SwapApiUtil } from '../utils/SwapApiUtil.js';\nimport { SwapCalculationUtil } from '../utils/SwapCalculationUtil.js';\nimport { withErrorBoundary } from '../utils/withErrorBoundary.js';\nimport { AlertController } from './AlertController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { RouterController } from './RouterController.js';\nimport { SnackController } from './SnackController.js';\n// -- Constants ---------------------------------------- //\nexport const INITIAL_GAS_LIMIT = 150000;\nexport const TO_AMOUNT_DECIMALS = 6;\nclass TransactionError extends Error {\n    constructor(message, displayMessage) {\n        super(message);\n        this.name = 'TransactionError';\n        this.displayMessage = displayMessage;\n    }\n}\n// -- State --------------------------------------------- //\nconst initialState = {\n    // Loading states\n    initializing: false,\n    initialized: false,\n    loadingPrices: false,\n    loadingQuote: false,\n    loadingApprovalTransaction: false,\n    loadingBuildTransaction: false,\n    loadingTransaction: false,\n    // Control states\n    switchingTokens: false,\n    // Error states\n    fetchError: false,\n    // Approval & Swap transaction states\n    approvalTransaction: undefined,\n    swapTransaction: undefined,\n    transactionError: undefined,\n    // Input values\n    sourceToken: undefined,\n    sourceTokenAmount: '',\n    sourceTokenPriceInUSD: 0,\n    toToken: undefined,\n    toTokenAmount: '',\n    toTokenPriceInUSD: 0,\n    networkPrice: '0',\n    networkBalanceInUSD: '0',\n    networkTokenSymbol: '',\n    inputError: undefined,\n    // Request values\n    slippage: ConstantsUtil.CONVERT_SLIPPAGE_TOLERANCE,\n    // Tokens\n    tokens: undefined,\n    popularTokens: undefined,\n    suggestedTokens: undefined,\n    foundTokens: undefined,\n    myTokensWithBalance: undefined,\n    tokensPriceMap: {},\n    // Calculations\n    gasFee: '0',\n    gasPriceInUSD: 0,\n    priceImpact: undefined,\n    maxSlippage: undefined,\n    providerFee: undefined\n};\nconst state = proxy({ ...initialState });\n// -- Controller ---------------------------------------- //\nconst controller = {\n    state,\n    subscribe(callback) {\n        return sub(state, () => callback(state));\n    },\n    subscribeKey(key, callback) {\n        return subKey(state, key, callback);\n    },\n    getParams() {\n        const namespace = ChainController.state.activeChain;\n        const caipAddress = ChainController.getAccountData(namespace)?.caipAddress ??\n            ChainController.state.activeCaipAddress;\n        const address = CoreHelperUtil.getPlainAddress(caipAddress);\n        const networkAddress = getActiveNetworkTokenAddress();\n        const connectorId = ConnectorController.getConnectorId(ChainController.state.activeChain);\n        if (!address) {\n            throw new Error('No address found to swap the tokens from.');\n        }\n        const invalidToToken = !state.toToken?.address || !state.toToken?.decimals;\n        const invalidSourceToken = !state.sourceToken?.address ||\n            !state.sourceToken?.decimals ||\n            !NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        const invalidSourceTokenAmount = !state.sourceTokenAmount;\n        return {\n            networkAddress,\n            fromAddress: address,\n            fromCaipAddress: caipAddress,\n            sourceTokenAddress: state.sourceToken?.address,\n            toTokenAddress: state.toToken?.address,\n            toTokenAmount: state.toTokenAmount,\n            toTokenDecimals: state.toToken?.decimals,\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenDecimals: state.sourceToken?.decimals,\n            invalidToToken,\n            invalidSourceToken,\n            invalidSourceTokenAmount,\n            availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,\n            isAuthConnector: connectorId === CommonConstantsUtil.CONNECTOR_ID.AUTH\n        };\n    },\n    async setSourceToken(sourceToken) {\n        if (!sourceToken) {\n            state.sourceToken = sourceToken;\n            state.sourceTokenAmount = '';\n            state.sourceTokenPriceInUSD = 0;\n            return;\n        }\n        state.sourceToken = sourceToken;\n        await SwapController.setTokenPrice(sourceToken.address, 'sourceToken');\n    },\n    setSourceTokenAmount(amount) {\n        state.sourceTokenAmount = amount;\n    },\n    async setToToken(toToken) {\n        if (!toToken) {\n            state.toToken = toToken;\n            state.toTokenAmount = '';\n            state.toTokenPriceInUSD = 0;\n            return;\n        }\n        state.toToken = toToken;\n        await SwapController.setTokenPrice(toToken.address, 'toToken');\n    },\n    setToTokenAmount(amount) {\n        state.toTokenAmount = amount ? NumberUtil.toFixed(amount, TO_AMOUNT_DECIMALS) : '';\n    },\n    async setTokenPrice(address, target) {\n        let price = state.tokensPriceMap[address] || 0;\n        if (!price) {\n            state.loadingPrices = true;\n            price = await SwapController.getAddressPrice(address);\n        }\n        if (target === 'sourceToken') {\n            state.sourceTokenPriceInUSD = price;\n        }\n        else if (target === 'toToken') {\n            state.toTokenPriceInUSD = price;\n        }\n        if (state.loadingPrices) {\n            state.loadingPrices = false;\n        }\n        if (SwapController.getParams().availableToSwap && !state.switchingTokens) {\n            SwapController.swapTokens();\n        }\n    },\n    async switchTokens() {\n        if (state.initializing || !state.initialized || state.switchingTokens) {\n            return;\n        }\n        state.switchingTokens = true;\n        try {\n            const newSourceToken = state.toToken ? { ...state.toToken } : undefined;\n            const newToToken = state.sourceToken ? { ...state.sourceToken } : undefined;\n            const newSourceTokenAmount = newSourceToken && state.toTokenAmount === '' ? '1' : state.toTokenAmount;\n            SwapController.setSourceTokenAmount(newSourceTokenAmount);\n            SwapController.setToTokenAmount('');\n            await SwapController.setSourceToken(newSourceToken);\n            await SwapController.setToToken(newToToken);\n            state.switchingTokens = false;\n            SwapController.swapTokens();\n        }\n        catch (error) {\n            state.switchingTokens = false;\n            throw error;\n        }\n    },\n    resetState() {\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n        state.tokensPriceMap = initialState.tokensPriceMap;\n        state.initialized = initialState.initialized;\n        state.initializing = initialState.initializing;\n        state.switchingTokens = initialState.switchingTokens;\n        state.sourceToken = initialState.sourceToken;\n        state.sourceTokenAmount = initialState.sourceTokenAmount;\n        state.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;\n        state.toToken = initialState.toToken;\n        state.toTokenAmount = initialState.toTokenAmount;\n        state.toTokenPriceInUSD = initialState.toTokenPriceInUSD;\n        state.networkPrice = initialState.networkPrice;\n        state.networkTokenSymbol = initialState.networkTokenSymbol;\n        state.networkBalanceInUSD = initialState.networkBalanceInUSD;\n        state.inputError = initialState.inputError;\n    },\n    resetValues() {\n        const { networkAddress } = SwapController.getParams();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        SwapController.setSourceToken(networkToken);\n        SwapController.setToToken(undefined);\n    },\n    getApprovalLoadingState() {\n        return state.loadingApprovalTransaction;\n    },\n    clearError() {\n        state.transactionError = undefined;\n    },\n    async initializeState() {\n        if (state.initializing) {\n            return;\n        }\n        state.initializing = true;\n        if (!state.initialized) {\n            try {\n                await SwapController.fetchTokens();\n                state.initialized = true;\n            }\n            catch (error) {\n                state.initialized = false;\n                SnackController.showError('Failed to initialize swap');\n                RouterController.goBack();\n            }\n        }\n        state.initializing = false;\n    },\n    async fetchTokens() {\n        const { networkAddress } = SwapController.getParams();\n        await SwapController.getNetworkTokenPrice();\n        await SwapController.getMyTokensWithBalance();\n        const networkToken = state.myTokensWithBalance?.find(token => token.address === networkAddress);\n        if (networkToken) {\n            state.networkTokenSymbol = networkToken.symbol;\n            SwapController.setSourceToken(networkToken);\n            SwapController.setSourceTokenAmount('0');\n        }\n    },\n    async getTokenList() {\n        const activeCaipNetworkId = ChainController.state.activeCaipNetwork?.caipNetworkId;\n        if (state.caipNetworkId === activeCaipNetworkId && state.tokens) {\n            return;\n        }\n        try {\n            state.tokensLoading = true;\n            const tokens = await SwapApiUtil.getTokenList(activeCaipNetworkId);\n            state.tokens = tokens;\n            state.caipNetworkId = activeCaipNetworkId;\n            state.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {\n                if (aTokenInfo.symbol < bTokenInfo.symbol) {\n                    return -1;\n                }\n                if (aTokenInfo.symbol > bTokenInfo.symbol) {\n                    return 1;\n                }\n                return 0;\n            });\n            const suggestedTokensByChain = (activeCaipNetworkId &&\n                ConstantsUtil.SUGGESTED_TOKENS_BY_CHAIN?.[activeCaipNetworkId]) ||\n                [];\n            const suggestedTokenObjects = suggestedTokensByChain\n                .map(symbol => tokens.find(t => t.symbol === symbol))\n                .filter((t) => Boolean(t));\n            const allSuggestedTokens = ConstantsUtil.SWAP_SUGGESTED_TOKENS || [];\n            const allSuggestedTokenObjects = allSuggestedTokens\n                .map(symbol => tokens.find(t => t.symbol === symbol))\n                .filter((t) => Boolean(t))\n                .filter(t => !suggestedTokenObjects.some(ct => ct.address === t.address));\n            state.suggestedTokens = [...suggestedTokenObjects, ...allSuggestedTokenObjects];\n        }\n        catch (error) {\n            state.tokens = [];\n            state.popularTokens = [];\n            state.suggestedTokens = [];\n        }\n        finally {\n            state.tokensLoading = false;\n        }\n    },\n    async getAddressPrice(address) {\n        const existPrice = state.tokensPriceMap[address];\n        if (existPrice) {\n            return existPrice;\n        }\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [address]\n        });\n        const fungibles = response?.fungibles || [];\n        const allTokens = [...(state.tokens || []), ...(state.myTokensWithBalance || [])];\n        const symbol = allTokens?.find(token => token.address === address)?.symbol;\n        const price = fungibles.find(p => p.symbol.toLowerCase() === symbol?.toLowerCase())?.price || 0;\n        const priceAsFloat = parseFloat(price.toString());\n        state.tokensPriceMap[address] = priceAsFloat;\n        return priceAsFloat;\n    },\n    async getNetworkTokenPrice() {\n        const { networkAddress } = SwapController.getParams();\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [networkAddress]\n        }).catch(() => {\n            SnackController.showError('Failed to fetch network token price');\n            return { fungibles: [] };\n        });\n        const token = response.fungibles?.[0];\n        const price = token?.price.toString() || '0';\n        state.tokensPriceMap[networkAddress] = parseFloat(price);\n        state.networkTokenSymbol = token?.symbol || '';\n        state.networkPrice = price;\n    },\n    async getMyTokensWithBalance(forceUpdate) {\n        const balances = await BalanceUtil.getMyTokensWithBalance(forceUpdate);\n        const swapBalances = SwapApiUtil.mapBalancesToSwapTokens(balances);\n        if (!swapBalances) {\n            return;\n        }\n        await SwapController.getInitialGasPrice();\n        SwapController.setBalances(swapBalances);\n    },\n    setBalances(balances) {\n        const { networkAddress } = SwapController.getParams();\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!caipNetwork) {\n            return;\n        }\n        const networkToken = balances.find(token => token.address === networkAddress);\n        balances.forEach(token => {\n            state.tokensPriceMap[token.address] = token.price || 0;\n        });\n        state.myTokensWithBalance = balances.filter(token => token.address.startsWith(caipNetwork.caipNetworkId));\n        state.networkBalanceInUSD = networkToken\n            ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString()\n            : '0';\n    },\n    async getInitialGasPrice() {\n        const res = await SwapApiUtil.fetchGasPrice();\n        if (!res) {\n            return { gasPrice: null, gasPriceInUSD: null };\n        }\n        switch (ChainController.state?.activeCaipNetwork?.chainNamespace) {\n            case CommonConstantsUtil.CHAIN.SOLANA:\n                state.gasFee = res.standard ?? '0';\n                state.gasPriceInUSD = NumberUtil.multiply(res.standard, state.networkPrice)\n                    .div(1e9)\n                    .toNumber();\n                return {\n                    gasPrice: BigInt(state.gasFee),\n                    gasPriceInUSD: Number(state.gasPriceInUSD)\n                };\n            case CommonConstantsUtil.CHAIN.EVM:\n            default:\n                // eslint-disable-next-line no-case-declarations\n                const value = res.standard ?? '0';\n                // eslint-disable-next-line no-case-declarations\n                const gasFee = BigInt(value);\n                // eslint-disable-next-line no-case-declarations\n                const gasLimit = BigInt(INITIAL_GAS_LIMIT);\n                // eslint-disable-next-line no-case-declarations\n                const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gasLimit, gasFee);\n                state.gasFee = value;\n                state.gasPriceInUSD = gasPrice;\n                return { gasPrice: gasFee, gasPriceInUSD: gasPrice };\n        }\n    },\n    // -- Swap -------------------------------------- //\n    async swapTokens() {\n        const address = ChainController.getAccountData()?.address;\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        const haveSourceTokenAmount = NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        if (!haveSourceTokenAmount) {\n            SwapController.setToTokenAmount('');\n        }\n        if (!toToken || !sourceToken || state.loadingPrices || !haveSourceTokenAmount || !address) {\n            return;\n        }\n        state.loadingQuote = true;\n        const amountDecimal = NumberUtil.bigNumber(state.sourceTokenAmount)\n            .times(10 ** sourceToken.decimals)\n            .round(0);\n        try {\n            const quoteResponse = await BlockchainApiController.fetchSwapQuote({\n                userAddress: address,\n                from: sourceToken.address,\n                to: toToken.address,\n                gasPrice: state.gasFee,\n                amount: amountDecimal.toString()\n            });\n            state.loadingQuote = false;\n            const quoteToAmount = quoteResponse?.quotes?.[0]?.toAmount;\n            if (!quoteToAmount) {\n                AlertController.open({\n                    displayMessage: 'Incorrect amount',\n                    debugMessage: 'Please enter a valid amount'\n                }, 'error');\n                return;\n            }\n            const toTokenAmount = NumberUtil.bigNumber(quoteToAmount)\n                .div(10 ** toToken.decimals)\n                .toString();\n            SwapController.setToTokenAmount(toTokenAmount);\n            const isInsufficientToken = SwapController.hasInsufficientToken(state.sourceTokenAmount, sourceToken.address);\n            if (isInsufficientToken) {\n                state.inputError = 'Insufficient balance';\n            }\n            else {\n                state.inputError = undefined;\n                SwapController.setTransactionDetails();\n            }\n        }\n        catch (error) {\n            const response = await SwapApiUtil.handleSwapError(error);\n            state.loadingQuote = false;\n            state.inputError = response || 'Insufficient balance';\n        }\n    },\n    // -- Create Transactions -------------------------------------- //\n    async getTransaction() {\n        const { fromCaipAddress, availableToSwap } = SwapController.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state.loadingQuote) {\n            return undefined;\n        }\n        try {\n            state.loadingBuildTransaction = true;\n            const hasAllowance = await SwapApiUtil.fetchSwapAllowance({\n                userAddress: fromCaipAddress,\n                tokenAddress: sourceToken.address,\n                sourceTokenAmount: state.sourceTokenAmount,\n                sourceTokenDecimals: sourceToken.decimals\n            });\n            let transaction = undefined;\n            if (hasAllowance) {\n                transaction = await SwapController.createSwapTransaction();\n            }\n            else {\n                transaction = await SwapController.createAllowanceTransaction();\n            }\n            state.loadingBuildTransaction = false;\n            state.fetchError = false;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to check allowance');\n            state.loadingBuildTransaction = false;\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createAllowanceTransaction() {\n        const { fromCaipAddress, sourceTokenAddress, toTokenAddress } = SwapController.getParams();\n        if (!fromCaipAddress || !toTokenAddress) {\n            return undefined;\n        }\n        if (!sourceTokenAddress) {\n            throw new Error('createAllowanceTransaction - No source token address found.');\n        }\n        try {\n            const response = await BlockchainApiController.generateApproveCalldata({\n                from: sourceTokenAddress,\n                to: toTokenAddress,\n                userAddress: fromCaipAddress\n            });\n            const address = CoreHelperUtil.getPlainAddress(response.tx.from);\n            if (!address) {\n                throw new Error('SwapController:createAllowanceTransaction - address is required');\n            }\n            const transaction = {\n                data: response.tx.data,\n                to: address,\n                gasPrice: BigInt(response.tx.eip155.gasPrice),\n                value: BigInt(response.tx.value),\n                toAmount: state.toTokenAmount\n            };\n            state.swapTransaction = undefined;\n            state.approvalTransaction = {\n                data: transaction.data,\n                to: transaction.to,\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n            return {\n                data: transaction.data,\n                to: transaction.to,\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create approval transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createSwapTransaction() {\n        const { networkAddress, fromCaipAddress, sourceTokenAmount } = SwapController.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {\n            return undefined;\n        }\n        const amount = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)?.toString();\n        try {\n            const response = await BlockchainApiController.generateSwapCalldata({\n                userAddress: fromCaipAddress,\n                from: sourceToken.address,\n                to: toToken.address,\n                amount: amount,\n                disableEstimate: true\n            });\n            const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;\n            const gas = BigInt(response.tx.eip155.gas);\n            const gasPrice = BigInt(response.tx.eip155.gasPrice);\n            const address = CoreHelperUtil.getPlainAddress(response.tx.to);\n            if (!address) {\n                throw new Error('SwapController:createSwapTransaction - address is required');\n            }\n            const transaction = {\n                data: response.tx.data,\n                to: address,\n                gas,\n                gasPrice,\n                value: isSourceTokenIsNetworkToken ? BigInt(amount ?? '0') : BigInt('0'),\n                toAmount: state.toTokenAmount\n            };\n            state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gas, gasPrice);\n            state.approvalTransaction = undefined;\n            state.swapTransaction = transaction;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    onEmbeddedWalletApprovalSuccess() {\n        SnackController.showLoading('Approve limit increase in your wallet');\n        RouterController.replace('SwapPreview');\n    },\n    // -- Send Transactions --------------------------------- //\n    async sendTransactionForApproval(data) {\n        const { fromAddress, isAuthConnector } = SwapController.getParams();\n        state.loadingApprovalTransaction = true;\n        const approveLimitMessage = `Approve limit increase in your wallet`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                onSuccess: SwapController.onEmbeddedWalletApprovalSuccess\n            });\n        }\n        else {\n            SnackController.showLoading(approveLimitMessage);\n        }\n        try {\n            await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: CommonConstantsUtil.CHAIN.EVM\n            });\n            await SwapController.swapTokens();\n            await SwapController.getTransaction();\n            state.approvalTransaction = undefined;\n            state.loadingApprovalTransaction = false;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.displayMessage;\n            state.loadingApprovalTransaction = false;\n            SnackController.showError(error?.displayMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_APPROVAL_ERROR',\n                properties: {\n                    message: error?.displayMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType(CommonConstantsUtil.CHAIN.EVM) ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n        }\n    },\n    async sendTransactionForSwap(data) {\n        if (!data) {\n            return undefined;\n        }\n        const { fromAddress, toTokenAmount, isAuthConnector } = SwapController.getParams();\n        state.loadingTransaction = true;\n        const snackbarPendingMessage = `Swapping ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        const snackbarSuccessMessage = `Swapped ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                onSuccess() {\n                    RouterController.replace('Account');\n                    SnackController.showLoading(snackbarPendingMessage);\n                    controller.resetState();\n                }\n            });\n        }\n        else {\n            SnackController.showLoading('Confirm transaction in your wallet');\n        }\n        try {\n            const forceUpdateAddresses = [state.sourceToken?.address, state.toToken?.address].join(',');\n            const transactionHash = await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: CommonConstantsUtil.CHAIN.EVM\n            });\n            state.loadingTransaction = false;\n            SnackController.showSuccess(snackbarSuccessMessage);\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_SUCCESS',\n                properties: {\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType(CommonConstantsUtil.CHAIN.EVM) ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            controller.resetState();\n            if (!isAuthConnector) {\n                RouterController.replace('Account');\n            }\n            controller.getMyTokensWithBalance(forceUpdateAddresses);\n            return transactionHash;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.displayMessage;\n            state.loadingTransaction = false;\n            SnackController.showError(error?.displayMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_ERROR',\n                properties: {\n                    message: error?.displayMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: SwapController.state.sourceToken?.symbol || '',\n                    swapToToken: SwapController.state.toToken?.symbol || '',\n                    swapFromAmount: SwapController.state.sourceTokenAmount || '',\n                    swapToAmount: SwapController.state.toTokenAmount || '',\n                    isSmartAccount: getPreferredAccountType(CommonConstantsUtil.CHAIN.EVM) ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            return undefined;\n        }\n    },\n    // -- Checks -------------------------------------------- //\n    hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {\n        const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state.myTokensWithBalance);\n        return isInsufficientSourceTokenForSwap;\n    },\n    // -- Calculations -------------------------------------- //\n    setTransactionDetails() {\n        const { toTokenAddress, toTokenDecimals } = SwapController.getParams();\n        if (!toTokenAddress || !toTokenDecimals) {\n            return;\n        }\n        state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, BigInt(state.gasFee), BigInt(INITIAL_GAS_LIMIT));\n        state.priceImpact = SwapCalculationUtil.getPriceImpact({\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenPriceInUSD: state.sourceTokenPriceInUSD,\n            toTokenPriceInUSD: state.toTokenPriceInUSD,\n            toTokenAmount: state.toTokenAmount\n        });\n        state.maxSlippage = SwapCalculationUtil.getMaxSlippage(state.slippage, state.toTokenAmount);\n        state.providerFee = SwapCalculationUtil.getProviderFee(state.sourceTokenAmount);\n    }\n};\n// Export the controller wrapped with our error boundary\nexport const SwapController = withErrorBoundary(controller);\n//# sourceMappingURL=SwapController.js.map"],"names":["SwapCalculationUtil","gas","gasPrice","totalGasCostInWei","networkPrice","totalGasCostInEther","NumberUtil","sourceTokenAmount","sourceTokenPriceInUSD","toTokenPriceInUSD","toTokenAmount","inputValue","outputValue","slippage","slippageToleranceDecimal","feePercentage","networkBalanceInUSD","gasPriceInUSD","sourceTokenAddress","balance","sourceTokenBalance","_b","_a","token","INITIAL_GAS_LIMIT","TO_AMOUNT_DECIMALS","initialState","ConstantsUtil","state","proxy","controller","callback","sub","key","subKey","namespace","ChainController","caipAddress","address","CoreHelperUtil","networkAddress","getActiveNetworkTokenAddress","connectorId","ConnectorController","invalidToToken","_c","invalidSourceToken","_d","_e","invalidSourceTokenAmount","_f","_g","_h","_i","CommonConstantsUtil","sourceToken","SwapController","amount","toToken","target","price","newSourceToken","newToToken","newSourceTokenAmount","error","networkToken","SnackController","RouterController","activeCaipNetworkId","tokens","SwapApiUtil","aTokenInfo","bTokenInfo","suggestedTokenObjects","symbol","t","allSuggestedTokenObjects","ct","existPrice","response","BlockchainApiController","fungibles","allTokens","priceAsFloat","forceUpdate","balances","BalanceUtil","swapBalances","caipNetwork","res","value","gasFee","gasLimit","haveSourceTokenAmount","amountDecimal","quoteResponse","quoteToAmount","AlertController","fromCaipAddress","availableToSwap","hasAllowance","transaction","toTokenAddress","ConnectionController","isSourceTokenIsNetworkToken","data","fromAddress","isAuthConnector","err","EventsController","getPreferredAccountType","W3mFrameRpcConstants","snackbarPendingMessage","snackbarSuccessMessage","forceUpdateAddresses","transactionHash","_j","_k","_l","toTokenDecimals","withErrorBoundary"],"mappings":"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","x_google_ignoreList":[0,1]}